syntax = "proto2";

// Command types
enum CommandTypeEnum{
  LED_test = 0;
  I2C_test = 1;
  SPI_test = 2;
  GPIO_digital = 3;
  Analog_read = 4;		// Analog in, ADC config
  Analog_write = 5;		// Analog out, PWM
}




// I2C options - descriptionben megadni melyik i2c interfeszt konfigolja fel
enum i2cDirection{
	I2C_write = 0;
	I2C_read = 1;
}

enum i2cBus{
	I2C1 = 1;
	I2C2 = 2;
	I2C3 = 3;
}

// Master only
message i2cMessage{
 required i2cBus bus = 1;
 required uint32 address = 2;
 required uint32 reg = 3;
 required i2cDirection direction = 4; 	// 1: read, 0: write
}




// SPI options
// only master modes should be available
enum spiMode{
	FULL_DUPLEX_MASTER = 0;		
	FULL_DUPLEX_SLAVE = 1;
	HALF_DUPLEX_MASTER = 2;
	HALF_DUPLEX_SLAVE = 3;
	RECEIVE_ONLY_MASTER = 4;
	RECEIVE_ONLY_SLAVE = 5;
	TRANSMIT_ONLY_MASTER = 6;
	TRANSMIT_ONLY_SLAVE = 7;
}

enum spiDirection{
 SPI_TRANSMIT = 0;
 SPI_RECEIVE = 1;
}

enum clockMode{
	MODE_0 = 0;
	MODE_1 = 1;
	MODE_2 = 2;
	MODE_3 = 3;
}

enum hardwareNSS{
	DISABLE = 0;
	NSS_INPUT = 1;
	NSS_OUTPUT = 2;
}

enum spiBus{
	SPI1 = 1;
	SPI2 = 2;
	SPI3 = 3;
}

message spiMessage{
 required spiBus bus = 1;
 optional spiMode mode = 2;		// master only, full_duplex
 required clockMode clock = 3;	//ide esetleg hintet megjeleniteni
 required uint32 command = 4;
 required spiDirection direction = 5;
 optional uint32 dummyclocks = 6;
}


// digitalGPIO options
enum gpioDirection{
	GPIO_INPUT = 0;
	GPIO_OUTPUT = 1;
}

enum gpioPinState{
	GPIO_LOW = 0;
	GPIO_HIGH = 1;
}


enum gpioPort{
	GPIO_PORT_A = 0;
	GPIO_PORT_B = 1;
	GPIO_PORT_C = 2;
}

message digitalGPIO{
 required gpioPort port= 1;
 required uint32 pin = 2;
 required gpioDirection direction = 3; 	 // Input/output
 required gpioPinState pinState = 4;	// Low, high
}



// Analog IN message
enum ADC_FULLSCALE{		
	FS_4P096 = 0;
}

enum ADC_MPX{		
	MPX_P0_NG = 0;
}

message analogIN{		
 required ADC_FULLSCALE fs = 1;	// Full scale
 required ADC_MPX mpx = 2;			// Channel selection
 required gpioPort port = 3;
 required uint32 pin = 4;
 optional uint32 dutyCycle = 5;
}



// Analog OUT message
message analogOUT{
 required gpioPort port = 1;
 required uint32 pin = 2;
 required uint32 frequency = 3;
 required uint32 dutyCycle = 4;
}



enum successfulWrite{
 LED_SET = 0;
 I2C_WRITE_OK = 1;
 I2C_WRITE_FAIL = 2;
 SPI_WRITE_OK = 3;
 SPI_WRITE_FAIL = 4;
 GPIO_SET = 5;
 GPIO_RESET = 6;
 PWM_SET = 7;
 PWM_RESET = 8;
}



// Main message
message Command{
 required CommandTypeEnum commandType = 1;
 optional	i2cMessage	i2c = 2;
 optional	spiMessage	spi = 3;
 optional	digitalGPIO	gpio = 4;
 optional analogIN analog_in = 6;
 optional analogOUT	analog_out = 7;
 optional uint32 responseRead = 10;					// Register value
 optional successfulWrite responseWrite = 11;		// Write success
}
