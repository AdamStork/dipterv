/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Sat Jan 18 00:22:33 2020. */

#ifndef PB_FUNCTIONAL_TEST_PB_H_INCLUDED
#define PB_FUNCTIONAL_TEST_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _CommandTypeEnum {
    CommandTypeEnum_LED_test = 0,
    CommandTypeEnum_I2C_test = 1,
    CommandTypeEnum_SPI_test = 2,
    CommandTypeEnum_GPIO_digital = 3,
    CommandTypeEnum_Analog_read = 4,
    CommandTypeEnum_Analog_write = 5
} CommandTypeEnum;
#define _CommandTypeEnum_MIN CommandTypeEnum_LED_test
#define _CommandTypeEnum_MAX CommandTypeEnum_Analog_write
#define _CommandTypeEnum_ARRAYSIZE ((CommandTypeEnum)(CommandTypeEnum_Analog_write+1))

typedef enum _i2cDirection {
    i2cDirection_I2C_write = 0,
    i2cDirection_I2C_read = 1
} i2cDirection;
#define _i2cDirection_MIN i2cDirection_I2C_write
#define _i2cDirection_MAX i2cDirection_I2C_read
#define _i2cDirection_ARRAYSIZE ((i2cDirection)(i2cDirection_I2C_read+1))

typedef enum _i2cBus {
    i2cBus_I2C1 = 1,
    i2cBus_I2C2 = 2,
    i2cBus_I2C3 = 3
} i2cBus;
#define _i2cBus_MIN i2cBus_I2C1
#define _i2cBus_MAX i2cBus_I2C3
#define _i2cBus_ARRAYSIZE ((i2cBus)(i2cBus_I2C3+1))

typedef enum _spiMode {
    spiMode_FULL_DUPLEX_MASTER = 0,
    spiMode_FULL_DUPLEX_SLAVE = 1,
    spiMode_HALF_DUPLEX_MASTER = 2,
    spiMode_HALF_DUPLEX_SLAVE = 3,
    spiMode_RECEIVE_ONLY_MASTER = 4,
    spiMode_RECEIVE_ONLY_SLAVE = 5,
    spiMode_TRANSMIT_ONLY_MASTER = 6,
    spiMode_TRANSMIT_ONLY_SLAVE = 7
} spiMode;
#define _spiMode_MIN spiMode_FULL_DUPLEX_MASTER
#define _spiMode_MAX spiMode_TRANSMIT_ONLY_SLAVE
#define _spiMode_ARRAYSIZE ((spiMode)(spiMode_TRANSMIT_ONLY_SLAVE+1))

typedef enum _spiDirection {
    spiDirection_SPI_TRANSMIT = 0,
    spiDirection_SPI_RECEIVE = 1
} spiDirection;
#define _spiDirection_MIN spiDirection_SPI_TRANSMIT
#define _spiDirection_MAX spiDirection_SPI_RECEIVE
#define _spiDirection_ARRAYSIZE ((spiDirection)(spiDirection_SPI_RECEIVE+1))

typedef enum _clockMode {
    clockMode_MODE_0 = 0,
    clockMode_MODE_1 = 1,
    clockMode_MODE_2 = 2,
    clockMode_MODE_3 = 3
} clockMode;
#define _clockMode_MIN clockMode_MODE_0
#define _clockMode_MAX clockMode_MODE_3
#define _clockMode_ARRAYSIZE ((clockMode)(clockMode_MODE_3+1))

typedef enum _hardwareNSS {
    hardwareNSS_DISABLE = 0,
    hardwareNSS_NSS_INPUT = 1,
    hardwareNSS_NSS_OUTPUT = 2
} hardwareNSS;
#define _hardwareNSS_MIN hardwareNSS_DISABLE
#define _hardwareNSS_MAX hardwareNSS_NSS_OUTPUT
#define _hardwareNSS_ARRAYSIZE ((hardwareNSS)(hardwareNSS_NSS_OUTPUT+1))

typedef enum _spiBus {
    spiBus_SPI1 = 1,
    spiBus_SPI2 = 2,
    spiBus_SPI3 = 3
} spiBus;
#define _spiBus_MIN spiBus_SPI1
#define _spiBus_MAX spiBus_SPI3
#define _spiBus_ARRAYSIZE ((spiBus)(spiBus_SPI3+1))

typedef enum _gpioPin {
    gpioPin_PA0 = 0,
    gpioPin_PA1 = 1,
    gpioPin_PA2 = 2,
    gpioPin_PA3 = 3,
    gpioPin_PA4 = 4,
    gpioPin_PA5 = 5,
    gpioPin_PA6 = 6,
    gpioPin_PA7 = 7,
    gpioPin_PA8 = 8,
    gpioPin_PA9 = 9,
    gpioPin_PA10 = 10,
    gpioPin_PA11 = 11,
    gpioPin_PA12 = 12,
    gpioPin_PA13 = 13,
    gpioPin_PA14 = 14,
    gpioPin_PA15 = 15,
    gpioPin_PB0 = 20,
    gpioPin_PB1 = 21,
    gpioPin_PB2 = 22,
    gpioPin_PB3 = 23,
    gpioPin_PB4 = 24,
    gpioPin_PB5 = 25,
    gpioPin_PB6 = 26,
    gpioPin_PB7 = 27,
    gpioPin_PB8 = 28,
    gpioPin_PB9 = 29,
    gpioPin_PB10 = 30,
    gpioPin_PB11 = 31,
    gpioPin_PB12 = 32,
    gpioPin_PB13 = 33,
    gpioPin_PB14 = 34,
    gpioPin_PB15 = 35,
    gpioPin_PC0 = 40,
    gpioPin_PC1 = 41,
    gpioPin_PC2 = 42,
    gpioPin_PC3 = 43,
    gpioPin_PC4 = 44,
    gpioPin_PC5 = 45,
    gpioPin_PC6 = 46,
    gpioPin_PC7 = 47,
    gpioPin_PC8 = 48,
    gpioPin_PC9 = 49,
    gpioPin_PC10 = 50,
    gpioPin_PC11 = 51,
    gpioPin_PC12 = 52,
    gpioPin_PC13 = 53,
    gpioPin_PC14 = 54,
    gpioPin_PC15 = 55
} gpioPin;
#define _gpioPin_MIN gpioPin_PA0
#define _gpioPin_MAX gpioPin_PC15
#define _gpioPin_ARRAYSIZE ((gpioPin)(gpioPin_PC15+1))

typedef enum _gpioDirection {
    gpioDirection_GPIO_INPUT = 0,
    gpioDirection_GPIO_OUTPUT = 1
} gpioDirection;
#define _gpioDirection_MIN gpioDirection_GPIO_INPUT
#define _gpioDirection_MAX gpioDirection_GPIO_OUTPUT
#define _gpioDirection_ARRAYSIZE ((gpioDirection)(gpioDirection_GPIO_OUTPUT+1))

typedef enum _gpioPinState {
    gpioPinState_GPIO_LOW = 0,
    gpioPinState_GPIO_HIGH = 1
} gpioPinState;
#define _gpioPinState_MIN gpioPinState_GPIO_LOW
#define _gpioPinState_MAX gpioPinState_GPIO_HIGH
#define _gpioPinState_ARRAYSIZE ((gpioPinState)(gpioPinState_GPIO_HIGH+1))

typedef enum _ADC_FULLSCALE {
    ADC_FULLSCALE_FS_4P096 = 0
} ADC_FULLSCALE;
#define _ADC_FULLSCALE_MIN ADC_FULLSCALE_FS_4P096
#define _ADC_FULLSCALE_MAX ADC_FULLSCALE_FS_4P096
#define _ADC_FULLSCALE_ARRAYSIZE ((ADC_FULLSCALE)(ADC_FULLSCALE_FS_4P096+1))

typedef enum _ADC_MPX {
    ADC_MPX_MPX_P0_NG = 0
} ADC_MPX;
#define _ADC_MPX_MIN ADC_MPX_MPX_P0_NG
#define _ADC_MPX_MAX ADC_MPX_MPX_P0_NG
#define _ADC_MPX_ARRAYSIZE ((ADC_MPX)(ADC_MPX_MPX_P0_NG+1))

typedef enum _successfulWrite {
    successfulWrite_LED_SET = 0,
    successfulWrite_I2C_WRITE_OK = 1,
    successfulWrite_I2C_WRITE_FAIL = 2,
    successfulWrite_SPI_WRITE_OK = 3,
    successfulWrite_SPI_WRITE_FAIL = 4,
    successfulWrite_GPIO_SET = 5,
    successfulWrite_GPIO_RESET = 6,
    successfulWrite_PWM_SET = 7,
    successfulWrite_PWM_RESET = 8
} successfulWrite;
#define _successfulWrite_MIN successfulWrite_LED_SET
#define _successfulWrite_MAX successfulWrite_PWM_RESET
#define _successfulWrite_ARRAYSIZE ((successfulWrite)(successfulWrite_PWM_RESET+1))

/* Struct definitions */
typedef struct _analogIN {
    ADC_FULLSCALE fs;
    ADC_MPX mpx;
    gpioPin pin;
    bool has_dutyCycle;
    uint32_t dutyCycle;
/* @@protoc_insertion_point(struct:analogIN) */
} analogIN;

typedef struct _analogOUT {
    gpioPin pin;
    uint32_t frequency;
    uint32_t dutyCycle;
/* @@protoc_insertion_point(struct:analogOUT) */
} analogOUT;

typedef struct _digitalGPIO {
    gpioPin pin;
    gpioDirection direction;
    gpioPinState pinState;
/* @@protoc_insertion_point(struct:digitalGPIO) */
} digitalGPIO;

typedef struct _i2cMessage {
    i2cBus bus;
    uint32_t address;
    uint32_t reg;
    i2cDirection direction;
/* @@protoc_insertion_point(struct:i2cMessage) */
} i2cMessage;

typedef struct _spiMessage {
    spiBus bus;
    bool has_mode;
    spiMode mode;
    clockMode clock;
    uint32_t command;
    spiDirection direction;
    bool has_dummyclocks;
    uint32_t dummyclocks;
/* @@protoc_insertion_point(struct:spiMessage) */
} spiMessage;

typedef struct _Command {
    CommandTypeEnum commandType;
    bool has_i2c;
    i2cMessage i2c;
    bool has_spi;
    spiMessage spi;
    bool has_gpio;
    digitalGPIO gpio;
    bool has_analog_in;
    analogIN analog_in;
    bool has_analog_out;
    analogOUT analog_out;
    bool has_responseRead;
    uint32_t responseRead;
    bool has_responseWrite;
    successfulWrite responseWrite;
/* @@protoc_insertion_point(struct:Command) */
} Command;

/* Default values for struct fields */

/* Initializer values for message structs */
#define i2cMessage_init_default                  {_i2cBus_MIN, 0, 0, _i2cDirection_MIN}
#define spiMessage_init_default                  {_spiBus_MIN, false, _spiMode_MIN, _clockMode_MIN, 0, _spiDirection_MIN, false, 0}
#define digitalGPIO_init_default                 {_gpioPin_MIN, _gpioDirection_MIN, _gpioPinState_MIN}
#define analogIN_init_default                    {_ADC_FULLSCALE_MIN, _ADC_MPX_MIN, _gpioPin_MIN, false, 0}
#define analogOUT_init_default                   {_gpioPin_MIN, 0, 0}
#define Command_init_default                     {_CommandTypeEnum_MIN, false, i2cMessage_init_default, false, spiMessage_init_default, false, digitalGPIO_init_default, false, analogIN_init_default, false, analogOUT_init_default, false, 0, false, _successfulWrite_MIN}
#define i2cMessage_init_zero                     {_i2cBus_MIN, 0, 0, _i2cDirection_MIN}
#define spiMessage_init_zero                     {_spiBus_MIN, false, _spiMode_MIN, _clockMode_MIN, 0, _spiDirection_MIN, false, 0}
#define digitalGPIO_init_zero                    {_gpioPin_MIN, _gpioDirection_MIN, _gpioPinState_MIN}
#define analogIN_init_zero                       {_ADC_FULLSCALE_MIN, _ADC_MPX_MIN, _gpioPin_MIN, false, 0}
#define analogOUT_init_zero                      {_gpioPin_MIN, 0, 0}
#define Command_init_zero                        {_CommandTypeEnum_MIN, false, i2cMessage_init_zero, false, spiMessage_init_zero, false, digitalGPIO_init_zero, false, analogIN_init_zero, false, analogOUT_init_zero, false, 0, false, _successfulWrite_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define analogIN_fs_tag                          1
#define analogIN_mpx_tag                         2
#define analogIN_pin_tag                         3
#define analogIN_dutyCycle_tag                   4
#define analogOUT_pin_tag                        1
#define analogOUT_frequency_tag                  2
#define analogOUT_dutyCycle_tag                  3
#define digitalGPIO_pin_tag                      1
#define digitalGPIO_direction_tag                2
#define digitalGPIO_pinState_tag                 3
#define i2cMessage_bus_tag                       1
#define i2cMessage_address_tag                   2
#define i2cMessage_reg_tag                       3
#define i2cMessage_direction_tag                 4
#define spiMessage_bus_tag                       1
#define spiMessage_mode_tag                      2
#define spiMessage_clock_tag                     3
#define spiMessage_command_tag                   4
#define spiMessage_direction_tag                 5
#define spiMessage_dummyclocks_tag               6
#define Command_commandType_tag                  1
#define Command_i2c_tag                          2
#define Command_spi_tag                          3
#define Command_gpio_tag                         4
#define Command_analog_in_tag                    6
#define Command_analog_out_tag                   7
#define Command_responseRead_tag                 10
#define Command_responseWrite_tag                11

/* Struct field encoding specification for nanopb */
extern const pb_field_t i2cMessage_fields[5];
extern const pb_field_t spiMessage_fields[7];
extern const pb_field_t digitalGPIO_fields[4];
extern const pb_field_t analogIN_fields[5];
extern const pb_field_t analogOUT_fields[4];
extern const pb_field_t Command_fields[9];

/* Maximum encoded size of messages (where known) */
#define i2cMessage_size                          16
#define spiMessage_size                          20
#define digitalGPIO_size                         6
#define analogIN_size                            12
#define analogOUT_size                           14
#define Command_size                             88

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FUNCTIONAL_TEST_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
