/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Sun Jan 12 19:59:04 2020. */

#ifndef PB_FUNCTIONAL_TEST_PB_H_INCLUDED
#define PB_FUNCTIONAL_TEST_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _CommandTypeEnum {
    CommandTypeEnum_STOP_CURRENT_TEST = 0,
    CommandTypeEnum_ADC_test = 1,
    CommandTypeEnum_I2C_test = 2,
    CommandTypeEnum_SPI_test = 4,
    CommandTypeEnum_LED_test = 6,
    CommandTypeEnum_GPIO_test = 7,
    CommandTypeEnum_TIMER_SINGLE_SHOT = 8,
    CommandTypeEnum_RTC_test = 9,
    CommandTypeEnum_PWM = 10
} CommandTypeEnum;
#define _CommandTypeEnum_MIN CommandTypeEnum_STOP_CURRENT_TEST
#define _CommandTypeEnum_MAX CommandTypeEnum_PWM
#define _CommandTypeEnum_ARRAYSIZE ((CommandTypeEnum)(CommandTypeEnum_PWM+1))

typedef enum _i2cDirection {
    i2cDirection_I2C_write = 0,
    i2cDirection_I2C_read = 1
} i2cDirection;
#define _i2cDirection_MIN i2cDirection_I2C_write
#define _i2cDirection_MAX i2cDirection_I2C_read
#define _i2cDirection_ARRAYSIZE ((i2cDirection)(i2cDirection_I2C_read+1))

typedef enum _spiDirection {
    spiDirection_FULL_DUPLEX_MASTER = 0,
    spiDirection_FULL_DUPLEX_SLAVE = 1,
    spiDirection_HALF_DUPLEX_MASTER = 2,
    spiDirection_HALF_DUPLEX_SLAVE = 3,
    spiDirection_RECEIVE_ONLY_MASTER = 4,
    spiDirection_RECEIVE_ONLY_SLAVE = 5,
    spiDirection_TRANSMIT_ONLY_MASTER = 6,
    spiDirection_TRANSMIT_ONLY_SLAVE = 7
} spiDirection;
#define _spiDirection_MIN spiDirection_FULL_DUPLEX_MASTER
#define _spiDirection_MAX spiDirection_TRANSMIT_ONLY_SLAVE
#define _spiDirection_ARRAYSIZE ((spiDirection)(spiDirection_TRANSMIT_ONLY_SLAVE+1))

typedef enum _gpioPin {
    gpioPin_PA0 = 0,
    gpioPin_PA1 = 1,
    gpioPin_PA2 = 2,
    gpioPin_PA3 = 3,
    gpioPin_PA4 = 4,
    gpioPin_PA5 = 5,
    gpioPin_PA6 = 6,
    gpioPin_PA7 = 7,
    gpioPin_PA8 = 8,
    gpioPin_PA9 = 9,
    gpioPin_PA10 = 10,
    gpioPin_PA11 = 11,
    gpioPin_PA12 = 12,
    gpioPin_PA13 = 13,
    gpioPin_PA14 = 14,
    gpioPin_PA15 = 15,
    gpioPin_PB0 = 20,
    gpioPin_PB1 = 21,
    gpioPin_PB2 = 22,
    gpioPin_PB3 = 23,
    gpioPin_PB4 = 24,
    gpioPin_PB5 = 25,
    gpioPin_PB6 = 26,
    gpioPin_PB7 = 27,
    gpioPin_PB8 = 28,
    gpioPin_PB9 = 29,
    gpioPin_PB10 = 30,
    gpioPin_PB11 = 31,
    gpioPin_PB12 = 32,
    gpioPin_PB13 = 33,
    gpioPin_PB14 = 34,
    gpioPin_PB15 = 35,
    gpioPin_PC0 = 40,
    gpioPin_PC1 = 41,
    gpioPin_PC2 = 42,
    gpioPin_PC3 = 43,
    gpioPin_PC4 = 44,
    gpioPin_PC5 = 45,
    gpioPin_PC6 = 46,
    gpioPin_PC7 = 47,
    gpioPin_PC8 = 48,
    gpioPin_PC9 = 49,
    gpioPin_PC10 = 50,
    gpioPin_PC11 = 51,
    gpioPin_PC12 = 52,
    gpioPin_PC13 = 53,
    gpioPin_PC14 = 54,
    gpioPin_PC15 = 55
} gpioPin;
#define _gpioPin_MIN gpioPin_PA0
#define _gpioPin_MAX gpioPin_PC15
#define _gpioPin_ARRAYSIZE ((gpioPin)(gpioPin_PC15+1))

typedef enum _gpioDirection {
    gpioDirection_GPIO_INPUT = 0,
    gpioDirection_GPIO_OUTPUT = 1
} gpioDirection;
#define _gpioDirection_MIN gpioDirection_GPIO_INPUT
#define _gpioDirection_MAX gpioDirection_GPIO_OUTPUT
#define _gpioDirection_ARRAYSIZE ((gpioDirection)(gpioDirection_GPIO_OUTPUT+1))

typedef enum _gpioPinState {
    gpioPinState_LOW = 0,
    gpioPinState_HIGH = 1
} gpioPinState;
#define _gpioPinState_MIN gpioPinState_LOW
#define _gpioPinState_MAX gpioPinState_HIGH
#define _gpioPinState_ARRAYSIZE ((gpioPinState)(gpioPinState_HIGH+1))

/* Struct definitions */
typedef struct _gpioTest {
    gpioPin pin;
    gpioDirection direction;
    gpioPinState pinState;
/* @@protoc_insertion_point(struct:gpioTest) */
} gpioTest;

typedef struct _i2cTest {
    i2cDirection direction;
    uint32_t regAddr;
    bool has_regData;
    uint32_t regData;
/* @@protoc_insertion_point(struct:i2cTest) */
} i2cTest;

typedef struct _ledTest {
    bool ledState;
    bool has_gpioPort;
    uint32_t gpioPort;
    bool has_gpioPin;
    uint32_t gpioPin;
    bool has_blinkingFrequency;
    uint32_t blinkingFrequency;
    bool has_luminance;
    uint32_t luminance;
/* @@protoc_insertion_point(struct:ledTest) */
} ledTest;

typedef struct _pwmTest {
    gpioPin pin;
    uint32_t frequency;
    uint32_t dutyCycle;
/* @@protoc_insertion_point(struct:pwmTest) */
} pwmTest;

typedef struct _spiTest {
    spiDirection direction;
    bool has_regData;
    uint32_t regData;
    bool has_spiMode;
    uint32_t spiMode;
/* @@protoc_insertion_point(struct:spiTest) */
} spiTest;

typedef struct _timerTest {
    gpioDirection direction;
    gpioPinState pinState;
/* @@protoc_insertion_point(struct:timerTest) */
} timerTest;

typedef struct _Command {
    CommandTypeEnum commandType;
    bool has_i2cTestType;
    i2cTest i2cTestType;
    bool has_spiTestType;
    spiTest spiTestType;
    bool has_gpioTestType;
    gpioTest gpioTestType;
    bool has_timerTestType;
    timerTest timerTestType;
    bool has_pwmTestType;
    pwmTest pwmTestType;
    bool has_ledTesType;
    ledTest ledTesType;
/* @@protoc_insertion_point(struct:Command) */
} Command;

/* Default values for struct fields */

/* Initializer values for message structs */
#define i2cTest_init_default                     {_i2cDirection_MIN, 0, false, 0}
#define spiTest_init_default                     {_spiDirection_MIN, false, 0, false, 0}
#define gpioTest_init_default                    {_gpioPin_MIN, _gpioDirection_MIN, _gpioPinState_MIN}
#define timerTest_init_default                   {_gpioDirection_MIN, _gpioPinState_MIN}
#define pwmTest_init_default                     {_gpioPin_MIN, 0, 0}
#define ledTest_init_default                     {0, false, 0, false, 0, false, 0, false, 0}
#define Command_init_default                     {_CommandTypeEnum_MIN, false, i2cTest_init_default, false, spiTest_init_default, false, gpioTest_init_default, false, timerTest_init_default, false, pwmTest_init_default, false, ledTest_init_default}
#define i2cTest_init_zero                        {_i2cDirection_MIN, 0, false, 0}
#define spiTest_init_zero                        {_spiDirection_MIN, false, 0, false, 0}
#define gpioTest_init_zero                       {_gpioPin_MIN, _gpioDirection_MIN, _gpioPinState_MIN}
#define timerTest_init_zero                      {_gpioDirection_MIN, _gpioPinState_MIN}
#define pwmTest_init_zero                        {_gpioPin_MIN, 0, 0}
#define ledTest_init_zero                        {0, false, 0, false, 0, false, 0, false, 0}
#define Command_init_zero                        {_CommandTypeEnum_MIN, false, i2cTest_init_zero, false, spiTest_init_zero, false, gpioTest_init_zero, false, timerTest_init_zero, false, pwmTest_init_zero, false, ledTest_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define gpioTest_pin_tag                         1
#define gpioTest_direction_tag                   2
#define gpioTest_pinState_tag                    3
#define i2cTest_direction_tag                    1
#define i2cTest_regAddr_tag                      2
#define i2cTest_regData_tag                      3
#define ledTest_ledState_tag                     1
#define ledTest_gpioPort_tag                     2
#define ledTest_gpioPin_tag                      3
#define ledTest_blinkingFrequency_tag            4
#define ledTest_luminance_tag                    5
#define pwmTest_pin_tag                          1
#define pwmTest_frequency_tag                    2
#define pwmTest_dutyCycle_tag                    3
#define spiTest_direction_tag                    1
#define spiTest_regData_tag                      2
#define spiTest_spiMode_tag                      3
#define timerTest_direction_tag                  1
#define timerTest_pinState_tag                   2
#define Command_commandType_tag                  1
#define Command_i2cTestType_tag                  2
#define Command_spiTestType_tag                  3
#define Command_gpioTestType_tag                 5
#define Command_timerTestType_tag                6
#define Command_pwmTestType_tag                  7
#define Command_ledTesType_tag                   10

/* Struct field encoding specification for nanopb */
extern const pb_field_t i2cTest_fields[4];
extern const pb_field_t spiTest_fields[4];
extern const pb_field_t gpioTest_fields[4];
extern const pb_field_t timerTest_fields[3];
extern const pb_field_t pwmTest_fields[4];
extern const pb_field_t ledTest_fields[6];
extern const pb_field_t Command_fields[8];

/* Maximum encoded size of messages (where known) */
#define i2cTest_size                             14
#define spiTest_size                             14
#define gpioTest_size                            6
#define timerTest_size                           4
#define pwmTest_size                             14
#define ledTest_size                             26
#define Command_size                             92

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FUNCTIONAL_TEST_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
