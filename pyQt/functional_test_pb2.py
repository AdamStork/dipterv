# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: functional_test.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='functional_test.proto',
  package='',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=_b('\n\x15\x66unctional_test.proto\"g\n\ni2cMessage\x12\x14\n\x03\x62us\x18\x01 \x02(\x0e\x32\x07.i2cBus\x12\x0f\n\x07\x61\x64\x64ress\x18\x02 \x02(\r\x12\x10\n\x08register\x18\x03 \x02(\r\x12 \n\tdirection\x18\x04 \x02(\x0e\x32\r.i2cDirection\"\x84\x01\n\nspiMessage\x12\x14\n\x03\x62us\x18\x01 \x02(\x0e\x32\x07.spiBus\x12\x18\n\x04mode\x18\x02 \x02(\x0e\x32\n.clockMode\x12\x0f\n\x07\x63ommand\x18\x03 \x02(\r\x12 \n\tdirection\x18\x04 \x02(\x0e\x32\r.spiDirection\x12\x13\n\x0b\x64ummyclocks\x18\x05 \x01(\r\"f\n\x0b\x64igitalGPIO\x12\x16\n\x03pin\x18\x01 \x02(\x0e\x32\t.gpioPins\x12!\n\tdirection\x18\x02 \x02(\x0e\x32\x0e.gpioDirection\x12\x1c\n\x05state\x18\x03 \x02(\x0e\x32\r.gpioPinState\"F\n\x08\x61nalogIN\x12\x16\n\x03pin\x18\x01 \x02(\x0e\x32\t.gpioPins\x12\"\n\nresolution\x18\x02 \x02(\x0e\x32\x0e.adcResolution\"I\n\tanalogOUT\x12\x16\n\x03pin\x18\x01 \x02(\x0e\x32\t.gpioPins\x12\x11\n\tfrequency\x18\x02 \x02(\r\x12\x11\n\tdutyCycle\x18\x03 \x02(\r\"\xfd\x01\n\x07\x43ommand\x12%\n\x0b\x63ommandType\x18\x01 \x02(\x0e\x32\x10.CommandTypeEnum\x12\x18\n\x03i2c\x18\x02 \x01(\x0b\x32\x0b.i2cMessage\x12\x18\n\x03spi\x18\x03 \x01(\x0b\x32\x0b.spiMessage\x12\x1a\n\x04gpio\x18\x04 \x01(\x0b\x32\x0c.digitalGPIO\x12\x1c\n\tanalog_in\x18\x06 \x01(\x0b\x32\t.analogIN\x12\x1e\n\nanalog_out\x18\x07 \x01(\x0b\x32\n.analogOUT\x12\x14\n\x0cresponseRead\x18\n \x01(\r\x12\'\n\rresponseWrite\x18\x0b \x01(\x0e\x32\x10.successfulWrite*p\n\x0f\x43ommandTypeEnum\x12\x0c\n\x08LED_test\x10\x00\x12\x0c\n\x08I2C_test\x10\x01\x12\x0c\n\x08SPI_test\x10\x02\x12\x10\n\x0cGPIO_digital\x10\x03\x12\x0f\n\x0b\x41nalog_read\x10\x04\x12\x10\n\x0c\x41nalog_write\x10\x05*+\n\x0ci2cDirection\x12\r\n\tI2C_write\x10\x00\x12\x0c\n\x08I2C_read\x10\x01*&\n\x06i2cBus\x12\x08\n\x04I2C1\x10\x01\x12\x08\n\x04I2C2\x10\x02\x12\x08\n\x04I2C3\x10\x03*\xcb\x01\n\x07spiMode\x12\x16\n\x12\x46ULL_DUPLEX_MASTER\x10\x00\x12\x15\n\x11\x46ULL_DUPLEX_SLAVE\x10\x01\x12\x16\n\x12HALF_DUPLEX_MASTER\x10\x02\x12\x15\n\x11HALF_DUPLEX_SLAVE\x10\x03\x12\x17\n\x13RECEIVE_ONLY_MASTER\x10\x04\x12\x16\n\x12RECEIVE_ONLY_SLAVE\x10\x05\x12\x18\n\x14TRANSMIT_ONLY_MASTER\x10\x06\x12\x17\n\x13TRANSMIT_ONLY_SLAVE\x10\x07*1\n\x0cspiDirection\x12\x10\n\x0cSPI_TRANSMIT\x10\x00\x12\x0f\n\x0bSPI_RECEIVE\x10\x01*;\n\tclockMode\x12\n\n\x06MODE_0\x10\x00\x12\n\n\x06MODE_1\x10\x01\x12\n\n\x06MODE_2\x10\x02\x12\n\n\x06MODE_3\x10\x03*9\n\x0bhardwareNSS\x12\x0b\n\x07\x44ISABLE\x10\x00\x12\r\n\tNSS_INPUT\x10\x01\x12\x0e\n\nNSS_OUTPUT\x10\x02*&\n\x06spiBus\x12\x08\n\x04SPI1\x10\x01\x12\x08\n\x04SPI2\x10\x02\x12\x08\n\x04SPI3\x10\x03*0\n\rgpioDirection\x12\x0f\n\x0bGPIO_OUTPUT\x10\x00\x12\x0e\n\nGPIO_INPUT\x10\x01*+\n\x0cgpioPinState\x12\x0c\n\x08GPIO_LOW\x10\x00\x12\r\n\tGPIO_HIGH\x10\x01*\xbb\x01\n\x08gpioPins\x12\x07\n\x03PA0\x10\x00\x12\x07\n\x03PA1\x10\x01\x12\x07\n\x03PA2\x10\x02\x12\x07\n\x03PA3\x10\x03\x12\x07\n\x03PA4\x10\x04\x12\x07\n\x03PA5\x10\x05\x12\x07\n\x03PA6\x10\x06\x12\x07\n\x03PA7\x10\x07\x12\x07\n\x03PB0\x10\x08\x12\x07\n\x03PB1\x10\t\x12\x07\n\x03PC0\x10\n\x12\x07\n\x03PC1\x10\x0b\x12\x07\n\x03PC2\x10\x0c\x12\x07\n\x03PC3\x10\r\x12\x07\n\x03PC4\x10\x0e\x12\x07\n\x03PC5\x10\x0f\x12\x08\n\x04TEMP\x10\x10\x12\x0b\n\x07VREFINT\x10\x11\x12\x08\n\x04VBAT\x10\x12*Q\n\radcResolution\x12\x0f\n\x0b\x41\x44\x43_12_BITS\x10\x00\x12\x0f\n\x0b\x41\x44\x43_10_BITS\x10\x01\x12\x0e\n\nADC_8_BITS\x10\x02\x12\x0e\n\nADC_6_BITS\x10\x03*\xcd\x01\n\x0fsuccessfulWrite\x12\x0b\n\x07LED_SET\x10\x00\x12\x10\n\x0cI2C_WRITE_OK\x10\x01\x12\x12\n\x0eI2C_WRITE_FAIL\x10\x02\x12\x10\n\x0cSPI_WRITE_OK\x10\x03\x12\x12\n\x0eSPI_WRITE_FAIL\x10\x04\x12\x0c\n\x08GPIO_SET\x10\x05\x12\x0e\n\nGPIO_RESET\x10\x06\x12\x13\n\x0fGPIO_WRITE_FAIL\x10\x07\x12\x0b\n\x07PWM_SET\x10\x08\x12\r\n\tPWM_RESET\x10\t\x12\x12\n\x0ePWM_WRITE_FAIL\x10\n')
)

_COMMANDTYPEENUM = _descriptor.EnumDescriptor(
  name='CommandTypeEnum',
  full_name='CommandTypeEnum',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LED_test', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='I2C_test', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPI_test', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GPIO_digital', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Analog_read', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Analog_write', index=5, number=5,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=772,
  serialized_end=884,
)
_sym_db.RegisterEnumDescriptor(_COMMANDTYPEENUM)

CommandTypeEnum = enum_type_wrapper.EnumTypeWrapper(_COMMANDTYPEENUM)
_I2CDIRECTION = _descriptor.EnumDescriptor(
  name='i2cDirection',
  full_name='i2cDirection',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='I2C_write', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='I2C_read', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=886,
  serialized_end=929,
)
_sym_db.RegisterEnumDescriptor(_I2CDIRECTION)

i2cDirection = enum_type_wrapper.EnumTypeWrapper(_I2CDIRECTION)
_I2CBUS = _descriptor.EnumDescriptor(
  name='i2cBus',
  full_name='i2cBus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='I2C1', index=0, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='I2C2', index=1, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='I2C3', index=2, number=3,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=931,
  serialized_end=969,
)
_sym_db.RegisterEnumDescriptor(_I2CBUS)

i2cBus = enum_type_wrapper.EnumTypeWrapper(_I2CBUS)
_SPIMODE = _descriptor.EnumDescriptor(
  name='spiMode',
  full_name='spiMode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='FULL_DUPLEX_MASTER', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FULL_DUPLEX_SLAVE', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HALF_DUPLEX_MASTER', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='HALF_DUPLEX_SLAVE', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RECEIVE_ONLY_MASTER', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RECEIVE_ONLY_SLAVE', index=5, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRANSMIT_ONLY_MASTER', index=6, number=6,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRANSMIT_ONLY_SLAVE', index=7, number=7,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=972,
  serialized_end=1175,
)
_sym_db.RegisterEnumDescriptor(_SPIMODE)

spiMode = enum_type_wrapper.EnumTypeWrapper(_SPIMODE)
_SPIDIRECTION = _descriptor.EnumDescriptor(
  name='spiDirection',
  full_name='spiDirection',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SPI_TRANSMIT', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPI_RECEIVE', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1177,
  serialized_end=1226,
)
_sym_db.RegisterEnumDescriptor(_SPIDIRECTION)

spiDirection = enum_type_wrapper.EnumTypeWrapper(_SPIDIRECTION)
_CLOCKMODE = _descriptor.EnumDescriptor(
  name='clockMode',
  full_name='clockMode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='MODE_0', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MODE_1', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MODE_2', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MODE_3', index=3, number=3,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1228,
  serialized_end=1287,
)
_sym_db.RegisterEnumDescriptor(_CLOCKMODE)

clockMode = enum_type_wrapper.EnumTypeWrapper(_CLOCKMODE)
_HARDWARENSS = _descriptor.EnumDescriptor(
  name='hardwareNSS',
  full_name='hardwareNSS',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DISABLE', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSS_INPUT', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NSS_OUTPUT', index=2, number=2,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1289,
  serialized_end=1346,
)
_sym_db.RegisterEnumDescriptor(_HARDWARENSS)

hardwareNSS = enum_type_wrapper.EnumTypeWrapper(_HARDWARENSS)
_SPIBUS = _descriptor.EnumDescriptor(
  name='spiBus',
  full_name='spiBus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SPI1', index=0, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPI2', index=1, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPI3', index=2, number=3,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1348,
  serialized_end=1386,
)
_sym_db.RegisterEnumDescriptor(_SPIBUS)

spiBus = enum_type_wrapper.EnumTypeWrapper(_SPIBUS)
_GPIODIRECTION = _descriptor.EnumDescriptor(
  name='gpioDirection',
  full_name='gpioDirection',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='GPIO_OUTPUT', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GPIO_INPUT', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1388,
  serialized_end=1436,
)
_sym_db.RegisterEnumDescriptor(_GPIODIRECTION)

gpioDirection = enum_type_wrapper.EnumTypeWrapper(_GPIODIRECTION)
_GPIOPINSTATE = _descriptor.EnumDescriptor(
  name='gpioPinState',
  full_name='gpioPinState',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='GPIO_LOW', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GPIO_HIGH', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1438,
  serialized_end=1481,
)
_sym_db.RegisterEnumDescriptor(_GPIOPINSTATE)

gpioPinState = enum_type_wrapper.EnumTypeWrapper(_GPIOPINSTATE)
_GPIOPINS = _descriptor.EnumDescriptor(
  name='gpioPins',
  full_name='gpioPins',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PA0', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA1', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA2', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA3', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA4', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA5', index=5, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA6', index=6, number=6,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PA7', index=7, number=7,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PB0', index=8, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PB1', index=9, number=9,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PC0', index=10, number=10,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PC1', index=11, number=11,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PC2', index=12, number=12,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PC3', index=13, number=13,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PC4', index=14, number=14,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PC5', index=15, number=15,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TEMP', index=16, number=16,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VREFINT', index=17, number=17,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VBAT', index=18, number=18,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1484,
  serialized_end=1671,
)
_sym_db.RegisterEnumDescriptor(_GPIOPINS)

gpioPins = enum_type_wrapper.EnumTypeWrapper(_GPIOPINS)
_ADCRESOLUTION = _descriptor.EnumDescriptor(
  name='adcResolution',
  full_name='adcResolution',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ADC_12_BITS', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADC_10_BITS', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADC_8_BITS', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADC_6_BITS', index=3, number=3,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1673,
  serialized_end=1754,
)
_sym_db.RegisterEnumDescriptor(_ADCRESOLUTION)

adcResolution = enum_type_wrapper.EnumTypeWrapper(_ADCRESOLUTION)
_SUCCESSFULWRITE = _descriptor.EnumDescriptor(
  name='successfulWrite',
  full_name='successfulWrite',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LED_SET', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='I2C_WRITE_OK', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='I2C_WRITE_FAIL', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPI_WRITE_OK', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPI_WRITE_FAIL', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GPIO_SET', index=5, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GPIO_RESET', index=6, number=6,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GPIO_WRITE_FAIL', index=7, number=7,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PWM_SET', index=8, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PWM_RESET', index=9, number=9,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PWM_WRITE_FAIL', index=10, number=10,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1757,
  serialized_end=1962,
)
_sym_db.RegisterEnumDescriptor(_SUCCESSFULWRITE)

successfulWrite = enum_type_wrapper.EnumTypeWrapper(_SUCCESSFULWRITE)
LED_test = 0
I2C_test = 1
SPI_test = 2
GPIO_digital = 3
Analog_read = 4
Analog_write = 5
I2C_write = 0
I2C_read = 1
I2C1 = 1
I2C2 = 2
I2C3 = 3
FULL_DUPLEX_MASTER = 0
FULL_DUPLEX_SLAVE = 1
HALF_DUPLEX_MASTER = 2
HALF_DUPLEX_SLAVE = 3
RECEIVE_ONLY_MASTER = 4
RECEIVE_ONLY_SLAVE = 5
TRANSMIT_ONLY_MASTER = 6
TRANSMIT_ONLY_SLAVE = 7
SPI_TRANSMIT = 0
SPI_RECEIVE = 1
MODE_0 = 0
MODE_1 = 1
MODE_2 = 2
MODE_3 = 3
DISABLE = 0
NSS_INPUT = 1
NSS_OUTPUT = 2
SPI1 = 1
SPI2 = 2
SPI3 = 3
GPIO_OUTPUT = 0
GPIO_INPUT = 1
GPIO_LOW = 0
GPIO_HIGH = 1
PA0 = 0
PA1 = 1
PA2 = 2
PA3 = 3
PA4 = 4
PA5 = 5
PA6 = 6
PA7 = 7
PB0 = 8
PB1 = 9
PC0 = 10
PC1 = 11
PC2 = 12
PC3 = 13
PC4 = 14
PC5 = 15
TEMP = 16
VREFINT = 17
VBAT = 18
ADC_12_BITS = 0
ADC_10_BITS = 1
ADC_8_BITS = 2
ADC_6_BITS = 3
LED_SET = 0
I2C_WRITE_OK = 1
I2C_WRITE_FAIL = 2
SPI_WRITE_OK = 3
SPI_WRITE_FAIL = 4
GPIO_SET = 5
GPIO_RESET = 6
GPIO_WRITE_FAIL = 7
PWM_SET = 8
PWM_RESET = 9
PWM_WRITE_FAIL = 10



_I2CMESSAGE = _descriptor.Descriptor(
  name='i2cMessage',
  full_name='i2cMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bus', full_name='i2cMessage.bus', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='address', full_name='i2cMessage.address', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='register', full_name='i2cMessage.register', index=2,
      number=3, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='direction', full_name='i2cMessage.direction', index=3,
      number=4, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=25,
  serialized_end=128,
)


_SPIMESSAGE = _descriptor.Descriptor(
  name='spiMessage',
  full_name='spiMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bus', full_name='spiMessage.bus', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='mode', full_name='spiMessage.mode', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='command', full_name='spiMessage.command', index=2,
      number=3, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='direction', full_name='spiMessage.direction', index=3,
      number=4, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dummyclocks', full_name='spiMessage.dummyclocks', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=131,
  serialized_end=263,
)


_DIGITALGPIO = _descriptor.Descriptor(
  name='digitalGPIO',
  full_name='digitalGPIO',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pin', full_name='digitalGPIO.pin', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='direction', full_name='digitalGPIO.direction', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='state', full_name='digitalGPIO.state', index=2,
      number=3, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=265,
  serialized_end=367,
)


_ANALOGIN = _descriptor.Descriptor(
  name='analogIN',
  full_name='analogIN',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pin', full_name='analogIN.pin', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='resolution', full_name='analogIN.resolution', index=1,
      number=2, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=369,
  serialized_end=439,
)


_ANALOGOUT = _descriptor.Descriptor(
  name='analogOUT',
  full_name='analogOUT',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pin', full_name='analogOUT.pin', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='frequency', full_name='analogOUT.frequency', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dutyCycle', full_name='analogOUT.dutyCycle', index=2,
      number=3, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=441,
  serialized_end=514,
)


_COMMAND = _descriptor.Descriptor(
  name='Command',
  full_name='Command',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='commandType', full_name='Command.commandType', index=0,
      number=1, type=14, cpp_type=8, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='i2c', full_name='Command.i2c', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='spi', full_name='Command.spi', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='gpio', full_name='Command.gpio', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='analog_in', full_name='Command.analog_in', index=4,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='analog_out', full_name='Command.analog_out', index=5,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='responseRead', full_name='Command.responseRead', index=6,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='responseWrite', full_name='Command.responseWrite', index=7,
      number=11, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=517,
  serialized_end=770,
)

_I2CMESSAGE.fields_by_name['bus'].enum_type = _I2CBUS
_I2CMESSAGE.fields_by_name['direction'].enum_type = _I2CDIRECTION
_SPIMESSAGE.fields_by_name['bus'].enum_type = _SPIBUS
_SPIMESSAGE.fields_by_name['mode'].enum_type = _CLOCKMODE
_SPIMESSAGE.fields_by_name['direction'].enum_type = _SPIDIRECTION
_DIGITALGPIO.fields_by_name['pin'].enum_type = _GPIOPINS
_DIGITALGPIO.fields_by_name['direction'].enum_type = _GPIODIRECTION
_DIGITALGPIO.fields_by_name['state'].enum_type = _GPIOPINSTATE
_ANALOGIN.fields_by_name['pin'].enum_type = _GPIOPINS
_ANALOGIN.fields_by_name['resolution'].enum_type = _ADCRESOLUTION
_ANALOGOUT.fields_by_name['pin'].enum_type = _GPIOPINS
_COMMAND.fields_by_name['commandType'].enum_type = _COMMANDTYPEENUM
_COMMAND.fields_by_name['i2c'].message_type = _I2CMESSAGE
_COMMAND.fields_by_name['spi'].message_type = _SPIMESSAGE
_COMMAND.fields_by_name['gpio'].message_type = _DIGITALGPIO
_COMMAND.fields_by_name['analog_in'].message_type = _ANALOGIN
_COMMAND.fields_by_name['analog_out'].message_type = _ANALOGOUT
_COMMAND.fields_by_name['responseWrite'].enum_type = _SUCCESSFULWRITE
DESCRIPTOR.message_types_by_name['i2cMessage'] = _I2CMESSAGE
DESCRIPTOR.message_types_by_name['spiMessage'] = _SPIMESSAGE
DESCRIPTOR.message_types_by_name['digitalGPIO'] = _DIGITALGPIO
DESCRIPTOR.message_types_by_name['analogIN'] = _ANALOGIN
DESCRIPTOR.message_types_by_name['analogOUT'] = _ANALOGOUT
DESCRIPTOR.message_types_by_name['Command'] = _COMMAND
DESCRIPTOR.enum_types_by_name['CommandTypeEnum'] = _COMMANDTYPEENUM
DESCRIPTOR.enum_types_by_name['i2cDirection'] = _I2CDIRECTION
DESCRIPTOR.enum_types_by_name['i2cBus'] = _I2CBUS
DESCRIPTOR.enum_types_by_name['spiMode'] = _SPIMODE
DESCRIPTOR.enum_types_by_name['spiDirection'] = _SPIDIRECTION
DESCRIPTOR.enum_types_by_name['clockMode'] = _CLOCKMODE
DESCRIPTOR.enum_types_by_name['hardwareNSS'] = _HARDWARENSS
DESCRIPTOR.enum_types_by_name['spiBus'] = _SPIBUS
DESCRIPTOR.enum_types_by_name['gpioDirection'] = _GPIODIRECTION
DESCRIPTOR.enum_types_by_name['gpioPinState'] = _GPIOPINSTATE
DESCRIPTOR.enum_types_by_name['gpioPins'] = _GPIOPINS
DESCRIPTOR.enum_types_by_name['adcResolution'] = _ADCRESOLUTION
DESCRIPTOR.enum_types_by_name['successfulWrite'] = _SUCCESSFULWRITE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

i2cMessage = _reflection.GeneratedProtocolMessageType('i2cMessage', (_message.Message,), dict(
  DESCRIPTOR = _I2CMESSAGE,
  __module__ = 'functional_test_pb2'
  # @@protoc_insertion_point(class_scope:i2cMessage)
  ))
_sym_db.RegisterMessage(i2cMessage)

spiMessage = _reflection.GeneratedProtocolMessageType('spiMessage', (_message.Message,), dict(
  DESCRIPTOR = _SPIMESSAGE,
  __module__ = 'functional_test_pb2'
  # @@protoc_insertion_point(class_scope:spiMessage)
  ))
_sym_db.RegisterMessage(spiMessage)

digitalGPIO = _reflection.GeneratedProtocolMessageType('digitalGPIO', (_message.Message,), dict(
  DESCRIPTOR = _DIGITALGPIO,
  __module__ = 'functional_test_pb2'
  # @@protoc_insertion_point(class_scope:digitalGPIO)
  ))
_sym_db.RegisterMessage(digitalGPIO)

analogIN = _reflection.GeneratedProtocolMessageType('analogIN', (_message.Message,), dict(
  DESCRIPTOR = _ANALOGIN,
  __module__ = 'functional_test_pb2'
  # @@protoc_insertion_point(class_scope:analogIN)
  ))
_sym_db.RegisterMessage(analogIN)

analogOUT = _reflection.GeneratedProtocolMessageType('analogOUT', (_message.Message,), dict(
  DESCRIPTOR = _ANALOGOUT,
  __module__ = 'functional_test_pb2'
  # @@protoc_insertion_point(class_scope:analogOUT)
  ))
_sym_db.RegisterMessage(analogOUT)

Command = _reflection.GeneratedProtocolMessageType('Command', (_message.Message,), dict(
  DESCRIPTOR = _COMMAND,
  __module__ = 'functional_test_pb2'
  # @@protoc_insertion_point(class_scope:Command)
  ))
_sym_db.RegisterMessage(Command)


# @@protoc_insertion_point(module_scope)
